plugins {
    id "io.spring.dependency-management" version "1.1.7"
    id 'java'
    id 'jacoco'
}

project.ext {
    publishRepo = "https://maven.pkg.github.com/reportportal/plugin-bts-rally"
    dependencyRepos = ["plugin-api", "commons-bom"]
    releaseMode = project.hasProperty("releaseMode")
    pluginID = "rally"
    pluginsDir = "$buildDir/plugins"
}

def scriptsUrl = 'https://raw.githubusercontent.com/reportportal/gradle-scripts/' +
        (releaseMode ? getProperty('scripts.version') : 'develop')

apply from: scriptsUrl + '/release-fat.gradle'
apply from: scriptsUrl + '/signing.gradle'


java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral { url "https://repo1.maven.org/maven2" }

    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

ext['spring-boot.version'] = "${springBootVersion}"

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + getProperty('bom.version') : 'com.epam.reportportal:commons-bom:5.12.1')
    }
}

ext['junit-jupiter.version'] = "${junitVersion}"

dependencies {
    if (releaseMode) {
        implementation 'com.github.reportportal:commons-dao:71ef80c'
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-dao:71ef80c'
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    }
    implementation 'org.hibernate.orm:hibernate-core:6.6.5.Final'

    implementation 'com.rallydev.rest:rally-rest-api:2.2.1'

    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
}

wrapper {
    gradleVersion = '8.10.2'
}

generatePomFileForShadowPublication { pom.packaging = "jar" }

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Andrei Varabyeu",
                "Plugin-Class": "com.epam.reportportal.extension.bugtracking.rally.RallyStrategyPlugin",
//                "Plugin-Dependencies": ""
        )
    }
}

shadowJar {
    zip64 true
    dependencies {
        include(dependency('com.rallydev.rest:rally-rest-api'))
    }
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginId}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compileClasspath
    }
    archiveExtension.set('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.required = true
    }
}
